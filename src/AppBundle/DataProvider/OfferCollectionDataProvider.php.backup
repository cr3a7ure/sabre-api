<?php

// src/AppBundle/DataProvider/OfferCollectionDataProvider.php

namespace AppBundle\DataProvider;

use AppBundle\Entity\Offer;
use AppBundle\Entity\Airport;
use AppBundle\Entity\Flight;
use AppBundle\Entity\Action;
use AppBundle\Entity\PostalAddress;
use Symfony\Component\Serializer\Annotation\Groups;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Request;
use ApiPlatform\Core\DataProvider\CollectionDataProviderInterface;
use ApiPlatform\Core\Exception\ResourceClassNotSupportedException;
use Unirest;
// use Mashape\UnirestPhp\Unirest;

final class OfferCollectionDataProvider implements CollectionDataProviderInterface
{
  protected $requestStack;

  public function __construct(RequestStack $requestStack)
    {
        $this->requestStack = $requestStack;
    }

    protected function getSabreToken() {
        $clientId = 'V1:2hxuxcm6hz4aex5n:DEVCENTER:EXT';
        $encodedId = base64_encode($clientId);
        $clientSecret = 'NhATlh81';
        $encodedSecret = base64_encode($clientSecret);
        $id = base64_encode($encodedId.':'.$encodedSecret);
        $urlToken = 'https://api.sabre.com/v2/auth/token';
        $urlToken = 'https://api.test.sabre.com/v2/auth/token';
        $headersToken= array('Authorization' => 'Basic '.$id, 'Content-Type' => 'application/x-www-form-urlencoded', 'Accept' => '*/*' );
        dump($headersToken);
        $payloadArray = array('grant_type'=>'client_credentials');
        $payload = Unirest\Request\Body::json($payloadArray);
        dump($payload);
        $payload = 'grant_type=client_credentials';
        dump($payloadArray);
        $responseToken = Unirest\Request::post($urlToken,$headersToken,$payload);
        dump($responseToken);
    }

    public function getCollection(string $resourceClass, string $operationName = null)
    {
        if (Offer::class !== $resourceClass) {
            throw new ResourceClassNotSupportedException();
        }
        //Temp Objects


        // $clientId = 'V1:2hxuxcm6hz4aex5n:DEVCENTER:EXT';
        // $encodedId = base64_encode($clientId);
        // $clientSecret = 'NhATlh81';
        // $encodedSecret = base64_encode($clientSecret);
        // $id = base64_encode($encodedId.':'.$encodedSecret);
        // $urlToken = 'https://api.sabre.com/v2/auth/token';
        // $urlToken = 'https://api.test.sabre.com/v2/auth/token';
        // $headersToken= array('Authorization' => 'Basic '.$id, 'Content-Type' => 'application/x-www-form-urlencoded', 'Accept' => '*/*' );
        // dump($headersToken);
        // $payloadArray = array('grant_type'=>'client_credentials');
        // $payload = Unirest\Request\Body::json($payloadArray);
        // dump($payload);
        // $payload = 'grant_type=client_credentials';
        // dump($payloadArray);
        // $responseToken = Unirest\Request::post($urlToken,$headersToken,$payload);
        // dump($responseToken);
        // $tokenAccess = $responseToken->body->access_token;
        // $tokenType = $responseToken->body->token_type;
        // $token = $tokenType . ' ' . $tokenAccess;

        // if(array_key_exists('itemOffered_arrivalAirport_iataCode',$props)) {
        //     $destinationPlace = $props['itemOffered_arrivalAirport_iataCode'];
        // } else {
        //   $destinationPlace = 'ATH';
        // }
        // if (array_key_exists('itemOffered_departureAirport_iataCode',$props)) {
        //     $originPlace = $props['itemOffered_departureAirport_iataCode'];
        // } else {
        //     $originPlace = 'LGW';
        // }
        // if (array_key_exists('itemOffered_arrivalTime',$props)) {
        //     $da = \DateTime::createFromFormat("D M d Y",$props['itemOffered_arrivalTime']);
        //     // $inboundPartialDate =  $da->format('Y-m-d');
        //     $inboundPartialDate =  $da->format('Y-m');
        // } else {
        //     $inboundPartialDate = '';
        // }
        // if (array_key_exists('itemOffered_departureTime',$props)) {
        //     $dd = \DateTime::createFromFormat("D M d Y",$props['itemOffered_departureTime']);
        //     // $outboundPartialDate =  $dd->format('Y-m-d');
        //     $outboundPartialDate =  $dd->format('Y-m');
        // } else {
        //     $outboundPartialDate = '2017-06';
        // }
        $token = 'bearer T1RLAQLTZY3HM2avNngeMp/rAcqXheN5QBCYLAop5wJui+mfNmZx0+DWAADADChGNglpLiB2OJnBpsltltaIoolad4AQaw0Qaouv9G9WueXg3V5OfRrlF05CNkmZuzegjqDLet/NlAul3vYGGHEXykuv9a0R8+1MpCpnnkKvRkOKiEaXp/uspLsRJ3/hCYEvVMzICF3smRBPvN5hTLaISw2w4qu6qPipodwiqpAH4YY1HR2d24Hzv3eYOKjP0R1yPPzcBcWb5In/jsHLLlX1c8wuIxuBSUbcftKYMU3CMvJM9bvhAiZgv4GBD7as';
//FLIGHTS
//
        $headers = array('Authorization' => $token, 'Content-Type' => 'application/json' );
        // $headers = array('X-Originating-Ip' => '94.66.220.69');
        $origin = 'JFK';
        $destination = 'LAX';
        $departuredate = '2017-07-07';
        $returndate = '2017-07-08';
        $onlineitinerariesonly = 'N';
        $limit = '10';
        $offset = '1';
        $eticketsonly = 'n';
        $sortby = 'totalfare';
        $order = 'asc';
        $sortby2 = 'departuretime';
        $order2 = 'asc';
        $pointofsalecountry = '';

        $query = array();
        $query['origin'] = 'JFK';
        $query['destination'] = 'LAX';
        $query['departuredate'] = '2017-07-07';
        $query['returndate'] = '2017-07-08';
        $query['onlineitinerariesonly'] = 'N';
        $query['limit'] = '10';
        $query['offset'] = '1';
        $query['eticketsonly'] = 'n';
        $query['sortby'] = 'totalfare';
        $query['order'] = 'asc';
        $query['sortby2'] = 'departuretime';
        $query['order2'] = 'asc';
        $query['pointofsalecountry'] = '';

        // $url = 'https://api.test.sabre.com/v1/shop/flights?origin='.$origin.'&destination='.$destination.'&departuredate='.$departuredate.'&returndate='.$returndate.'&onlineitinerariesonly='.$onlineitinerariesonly.'&limit='.$limit.'&offset='.$offset.'&eticketsonly='.$eticketsonly.'&sortby='.$sortby.'&order='.$order.'&sortby2='.$sortby2.'&order2='.$order2.'&pointofsalecountry='.$pointofsalecountry;
        // $response = Unirest\Request::get($url,$headers);
        
        $url = 'https://api.test.sabre.com/v1/shop/flights';
        $response = Unirest\Request::get($url,$headers,$query);

        dump($response);
        // $value->AirItineraryPricingInfo->ItinTotalFare->TotalFare->Amount;
        // $value->AirItineraryPricingInfo->ItinTotalFare->TotalFare->CurrencyCode;
        // $flightArray = $value->AirItinerary->OriginDestinationOptions->OriginDestinationOption; ->OriginDestinationOption->FlightSegment->0->DepartureDateTime/ArrivalDateTime/OperatingAirline

        // $addresses = array();
        // $airports = array();
        // foreach ($Places as $key => $value) {
        //     $places[$value->PlaceId] =  array();
        //     if (array_key_exists('IataCode', get_object_vars($value))) {
        //         $addresses[$key] = new PostalAddress();
        //         $addresses[$key]->setAddressCountry($value->CountryName);
        //         $addresses[$key]->setId($key);
        //         $addresses[$key]->setAddressLocality($value->CityName);
        //         $addresses[$key]->setAddressRegion("kjhkj");
        //         $addresses[$key]->setPostalCode("82100");
        //         $addresses[$key]->setStreetAddress('sdf');
        //         $airports[$key] = new Airport();
        //         $airports[$key]->setIataCode($value->IataCode);
        //         $airports[$key]->setId($key);
        //         $airports[$key]->setAddress($addresses[$key]);
        //         $places[$value->PlaceId]['airport'] = $key;
        //     }
        //     foreach (get_object_vars($value) as $key2 => $value2) {
        //         $places[$value->PlaceId][$key2] = $value2;
        //     }
        // }

        $originAirport = new Airport();
        $originAirport->setId(1);
        $originAirport->setIataCode($origin);
        $destinationAirport = new Airport();
        $destinationAirport->setId(2);
        $destinationAirport->setIataCode($destination);
        $offersArray = $response->body->PricedItineraries;
        $flights = array();
        $offered = array();
        $airlineCodes = array();
        foreach ($offersArray as $key => $value) {
            // dump($destination);
            $flights[$key] = new Flight();
            $flights[$key]->setId($key);
            $flights[$key]->setAdditionalType('https://schema.org/Product');
            $flights[$key]->setArrivalAirport($originAirport);
            $flights[$key]->setDepartureAirport($destinationAirport);
            $departureTime = \DateTime::createFromFormat("Y-m-d?H:i:s",$value->AirItinerary->OriginDestinationOptions->OriginDestinationOption[0]->FlightSegment[0]->DepartureDateTime);
            $arrivalTime = \DateTime::createFromFormat("Y-m-d?H:i:s",$value->AirItinerary->OriginDestinationOptions->OriginDestinationOption[1]->FlightSegment[0]->DepartureDateTime);
            $flights[$key]->setDepartureTime($departureTime);
            $flights[$key]->setArrivalTime($arrivalTime);
            $airlineCode = $value->AirItinerary->OriginDestinationOptions->OriginDestinationOption[0]->FlightSegment[0]->OperatingAirline->Code;
            // if (array_key_exists('CompanyShortName',($value->AirItinerary->OriginDestinationOptions->OriginDestinationOption[0]->FlightSegment[0]->OperatingAirline))) {
            //     $flights[$key]->setProvider($value->AirItinerary->OriginDestinationOptions->OriginDestinationOption[0]->FlightSegment[0]->OperatingAirline->CompanyShortName);
            // } else {
            //     $airlineCodes[$key] = $airlineCode;
            // }
            $airlineCodes[$key] = $airlineCode;
            $offered[$key] = new Offer();
            $offered[$key]->setId($key);
            $offered[$key]->setPrice($value->AirItineraryPricingInfo->ItinTotalFare->TotalFare->Amount);
            $offered[$key]->setPriceCurrency($value->AirItineraryPricingInfo->ItinTotalFare->TotalFare->CurrencyCode);
            $offered[$key]->setSeller('sabre');
            $offered[$key]->setItemOffered($flights[$key]);
        }

        $airlines = implode(',',$airlineCodes);
        // foreach ($airlineCodes as $key => $value) {
        //     $airlines .= $value . ',';
        // }
        // array_pop($airlines);
        dump($airlines);
        $url = 'https://api.test.sabre.com/v1/lists/utilities/airlines?airlinecode='.$airlines;
        $airlineResponse = Unirest\Request::get($url,$headers);
        dump($airlineResponse);
        $airlineData = $airlineResponse->body->AirlineInfo;
        foreach ($airlineCodes as $i => $v) {
            foreach ($airlineData as $k => $value) {
                if($value->AirlineCode==$v) {
                    $flights[$i]->setProvider($value->AirlineName);
                }
            }
        }
        dump($flights);
        // $value->AirItinerary->DirectionInd 'Return';
        $request = $this->requestStack->getCurrentRequest();
        // $test = $request->query;//->get('');
        $props = $request->query->all();
        // dump($props);
        // $da = \DateTime::createFromFormat("D M d Y",$props['itemOffered_arrivalTime']);
        // $dd = \DateTime::createFromFormat("D M d Y",$props['itemOffered_departureTime']);
        // $da->format('Y-m-d');
        // dump($da->format('Y-m-d'));
        // dump($dd);


        // $departureTime = \DateTime::createFromFormat("D M d Y",$value->QuoteDateTime);
        $propKeys = array_keys($props);

            // throw new \Exception('DUMPSTERRRRR!');
            return [$offered];
    }
}